@page "/formfields"
@using System.Linq
@inject Code.IFormFieldRepository Repo;

<h3>Form Fields</h3>

@* <a href="/formfields/new" class="btn btn-success"><AeIcon Icon="add-circle" IconStyle="Elemental.Code.RXIcon.RXStyle.Fill" /> Add Form Field</a> *@

<AeButton To="/formfields/new" class="blue">
    <AeIcon Icon="add-circle" IconStyle="Elemental.Code.RXIcon.RXStyle.Fill" />
    Create New Form Field
</AeButton>

@if (_formFields != null && _formFields.Count() > 0)
{
    <AeTable 
        Accessors="accessorFunctions"
        Renderers="renderFunctions"
        Dataset="@_formFields"
        Headers="@headers"
    />


    <h4>JSON</h4>
    <pre>
        <code>
            @foreach (var field in _formFields)
            {
                @field.JSON
                <br />
            }
        </code>
    </pre>

    <h4>C#</h4>
    <pre>
        <code>
            @foreach (var field in _formFields)
            {
                @field.CSCode
                <br />
            }
        </code>
    </pre>
    
}

@code 
{

    private List<string> headers = new List<string>()
    {
        "Section", "Field", "Field Type", "Extension"
    };

    private List<Func<FormField, string>> accessorFunctions = new List<Func<FormField, string>>()
    {
        (f => f.Section),
        (f => f.Field),
        (f => f.FieldType),
        (f => f.ExtensionLabel)
    };

    private List<Func<FormField, RenderFragment>> renderFunctions = new List<Func<FormField, RenderFragment>>()
    {
        null,
        (f => @<a href=@($"/formfields/view/{f.FormFieldID}")>@f.Field</a>),
        null,
        null
    };

    private List<FormField> _formFields = new List<FormField>();

    protected override async Task OnInitializedAsync()
    {
        var formFields = await Repo.GetFormFields();
        _formFields = formFields.ToList();
    }

}

