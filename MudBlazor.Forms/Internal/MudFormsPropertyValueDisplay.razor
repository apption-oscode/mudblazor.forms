@typeparam T
@using System.ComponentModel.DataAnnotations
@namespace MudBlazor.Forms

<MudField Label="@GetLabel()" Variant=@Variant HelperText="@_fieldNotes">@GetFormattedValue()</MudField>

@code {
    [Parameter, EditorRequired]
    public System.Reflection.PropertyInfo PropertyInfo { get; set; } = default!;

    [Parameter, EditorRequired]
    public T Instance { get; set; } = default!;

    [Parameter] public ModelFormStyle ModelFormStyle { get; set; }

    [Parameter] public string TrueValue { get; set; } = "Yes";

    [Parameter] public string FalseValue { get; set; } = "No";

    [Parameter] public string NullValue { get; set; } = "-";

    [CascadingParameter(Name = "LabelForPropertyFunc")]
    public Func<string, string>? LabelForPropertyFunc { get; set; } = null;

    [CascadingParameter(Name = "ModelFormContext")]
    public ModelFormContext<T>? ModelFormContext { get; set; } = null;

    [CascadingParameter(Name = "LocalizerFunction")]
    public Func<string, string?>? LocalizerFunction { get; set; } = null;

    [CascadingParameter(Name = "Variant")]
    public Variant Variant { get; set; }

    private string? _fieldNotes;

    protected override async Task OnInitializedAsync()
    {
        _fieldNotes = MudModelFormTools.GetFieldNote(ModelFormContext, PropertyInfo);
        await Task.CompletedTask;
    }

    public string PropertyValue
    {
        get => PropertyInfo.GetValue(Instance) as string;
        set
        {
            PropertyInfo.SetValue(Instance, value);
        }
    }

    private string Localize(string input) => LocalizerFunction?.Invoke(input) ?? input;

    public string GetFormattedValue()
    {
        if (MudModelFormTools.IsPasswordField(PropertyInfo))
            return "********";
        var value = PropertyInfo.GetValue(Instance);

        if (value is null)
            return Localize(NullValue);

        var nonNullValue = MudModelFormTools.GetNonNullableValue(PropertyInfo, Instance);
        var format = PropertyInfo.GetStringFormat();
        if (format is null)
        {
            if (nonNullValue is bool b)
            {
                return b ? Localize(TrueValue) : Localize(FalseValue);   
            }
            return Localize(ModelFormContext?.GetDisplayValue(PropertyInfo, Instance) ?? NullValue);    
        }
        else
        {
            if (MudModelFormTools.IsNumericType(PropertyInfo.PropertyType))
            {
                var num = Convert.ToDouble(PropertyInfo.GetValue(Instance));
                return num.ToString(format);
            }
            else if (MudModelFormTools.IsDateType(PropertyInfo.PropertyType))
            {
                var dt = Convert.ToDateTime(PropertyInfo.GetValue(Instance));
                return dt.ToString(format);
            }
            else
            {
                return value!.ToString();
            }
        }


    }

    private string GetLabel()
    {
        return MudModelFormTools.GetLabel(PropertyInfo, LabelForPropertyFunc, false);
    }

    private string GetID() => PropertyInfo.Name;



    private int? HasStringLength()
    {
        var att = StringLengthAttribute.GetCustomAttribute(PropertyInfo, typeof(StringLengthAttribute)) as StringLengthAttribute;
        return att?.MaximumLength;
    }

}
