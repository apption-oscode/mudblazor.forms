@typeparam T
@namespace MudBlazor.Forms
@using Microsoft.AspNetCore.Components.Forms

    
        <MudFormLabel PropertyInfo="@PropertyInfo" Instance="@Instance" />
        <MudCheckBox @bind-Checked="PropertyValue" Label="GetLabel()"></MudCheckBox>
    <div class="errortext">
@if (MudModelFormTools.IsNullable(PropertyInfo))
{
    <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(MudModelFormTools.GetExpression<bool?>(Instance,PropertyInfo))" />
} else {
    <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(MudModelFormTools.GetExpression<bool>(Instance,PropertyInfo))" />
}
    </div>

@code {

    [Parameter]
    public System.Reflection.PropertyInfo PropertyInfo { get; set; }

    /// <summary>
    /// There are two major layout options. Standard has line based with label / field and compact has a tabular layout with CSS flex.
    /// </summary>
    [Parameter] public ModelFormStyle ModelFormStyle { get; set; }

    /// <summary>
    /// Text that will be displayed for the Cancel button. Will be null and hidden by default.
    /// </summary>
    [CascadingParameter(Name= "LabelForPropertyFunc")]
    public Func<string,string> LabelForPropertyFunc { get; set; } = null;

    [CascadingParameter(Name = "Notifier")]
    public Func<ModelFormArgsInternal, Task> Notifier { get; set; }

    private string GetLabel()
    {
        return MudModelFormTools.GetLabel(PropertyInfo,LabelForPropertyFunc, false);
    }

    protected override async Task OnInitializedAsync()
    {
        valueChangedCallback = EventCallback.Factory.Create<object>(this, s => OnValueChanged(s));
    }

    private EventCallback<object> valueChangedCallback;

    private async Task OnValueChanged(object value)
    {
        var changeArgs = new ModelFormArgsInternal() { PropertyInfo = PropertyInfo, EditContext = new EditContext(PropertyInfo) };
        await Notifier(changeArgs);
    }

    [Parameter]
    public T Instance { get; set; }

    public bool PropertyValue
    {
        get {
            var result = MudModelFormTools.AsNullableValue<bool>(PropertyInfo,Instance);
            if (result is null)
            {
                return false;
            }
            else
            {
                return (bool)result;
            }
        }
        set
        {
            var currentValue = Convert.ToBoolean(PropertyInfo.GetValue(Instance));
            PropertyInfo.SetValue(Instance, value);
            if (value!= currentValue)
            {
                valueChangedCallback.InvokeAsync(value);
            }
        }
    }

    private string GetID() => PropertyInfo.Name;

}
