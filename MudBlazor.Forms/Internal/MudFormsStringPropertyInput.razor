@typeparam T
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@namespace MudBlazor.Forms

@if (!Editable)
{
    @if (MudModelFormTools.IsNumericType(PropertyInfo.PropertyType))
    {
        <MudTextField ReadOnly="true" InputType="@TextFieldType" Variant="Variant.Filled" 
            @key="PropertyInfo.Name" @bind-Value="PropertyValue"
              Label="@GetLabel()" For="@(MudModelFormTools.GetExpression<string>(Instance, PropertyInfo))">@GetFormattedValue()</MudTextField>
    }
    else
    {
        <MudTextField ReadOnly="true" InputType="@TextFieldType" Variant="Variant.Filled"
            @key="PropertyInfo.Name" @bind-Value="PropertyValue"
              Label="@GetLabel()" For="@(MudModelFormTools.GetExpression<string>(Instance, PropertyInfo))">@GetFormattedValue()</MudTextField>
    }
}
else
{

@if (HasStringLength() is null)
{
        <MudTextField @key="PropertyInfo.Name" InputType="@TextFieldType" 
            @bind-Value="PropertyValue" Label="@GetLabel()" Variant="Variant.Text" 
            Placeholder="@localize(MudModelFormTools.GetPlaceHolder(PropertyInfo))" Lines="3"
              For="@(MudModelFormTools.GetExpression<string>(Instance, PropertyInfo))" />
}
else
{
        <MudTextField @key="PropertyInfo.Name" 
                    InputType="@TextFieldType" 
                    @bind-Value="PropertyValue" Label="@GetLabel()" Placeholder="@localize(MudModelFormTools.GetPlaceHolder(PropertyInfo))"
                    MaxLength="@(MudModelFormTools.GetSize(PropertyInfo) ?? 524288)"
                    For="@(MudModelFormTools.GetExpression<string>(Instance, PropertyInfo))" />
}
}

@code {

    [Parameter]
    public System.Reflection.PropertyInfo PropertyInfo { get; set; }

    [Parameter]
    public T Instance { get; set; }

    [Parameter] public ModelFormStyle ModelFormStyle { get; set; }

    [Parameter]
    public bool Editable { get; set; } = true;

    [CascadingParameter(Name = "Notifier")]
    public Func<ModelFormArgsInternal, Task> Notifier { get; set; }

    [CascadingParameter(Name = "LocalizerFunction")]
    public Func<string, string?> LocalizerFunction { get; set; } = null;

    private string localize(string input)
    {
        return LocalizerFunction is null ? input : (LocalizerFunction(input)?? input);
    }

    private InputType TextFieldType { get
        {
            return MudModelFormTools.IsPasswordField(PropertyInfo)?InputType.Password:InputType.Text;
        } }

    protected override async Task OnInitializedAsync()
    {
        valueChangedCallback = EventCallback.Factory.Create<object>(this, s => OnValueChanged(s));
    }

    private EventCallback<object> valueChangedCallback;

    private async Task OnValueChanged(object value)
    {
        var changeArgs = new ModelFormArgsInternal() { PropertyInfo = PropertyInfo, EditContext = new EditContext(PropertyInfo) };
        await Notifier(changeArgs);
    }

    public string PropertyValue
    {
        get => PropertyInfo.GetValue(Instance) as string;
        set
        {
            var prevValue = PropertyInfo.GetValue(Instance) as string;
            PropertyInfo.SetValue(Instance, value);
            if (value != prevValue)
                valueChangedCallback.InvokeAsync(value);
        }
    }

    public string GetFormattedValue()
    {
        var value = PropertyInfo.GetValue(Instance);

        if (value is null)
            return string.Empty;

        var format = PropertyInfo.GetStringFormat();
        if (format is null)
        {
            return value.ToString();
        }
        else
        {
            if (MudModelFormTools.IsNumericType(PropertyInfo.PropertyType))
            {
                var num = Convert.ToDouble(PropertyInfo.GetValue(Instance));
                return num.ToString(format);
            }
            else
            {
                return value.ToString();
            }
        }


    }

    /// <summary>
    /// Text that will be displayed for the Cancel button. Will be null and hidden by default.
    /// </summary>
    [CascadingParameter(Name = "LabelForPropertyFunc")]
    public Func<string, string> LabelForPropertyFunc { get; set; } = null;

    private string GetLabel()
    {
        return MudModelFormTools.GetLabel(PropertyInfo, LabelForPropertyFunc, false);
    }

    private string GetID() => PropertyInfo.Name;



    private int? HasStringLength()
    {
        var att = StringLengthAttribute.GetCustomAttribute(PropertyInfo, typeof(StringLengthAttribute)) as StringLengthAttribute;
        return att?.MaximumLength;
    }

}
