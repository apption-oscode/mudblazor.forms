@typeparam T
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@namespace MudBlazor.Forms

@if(MudModelFormTools.IsPasswordField(PropertyInfo))
{
    <MudTextField @key="PropertyInfo.Name"
            @bind-Value="PropertyValue"
            InputType="@PasswordInput"
            ReadOnly=!PropertyInfo.IsEditable()
            Label="@GetLabel()"
            Variant="Variant.Text"
            Placeholder="@localize(MudModelFormTools.GetPlaceHolder(PropertyInfo))"
            Lines="@(MudModelFormTools.GetLineCount(PropertyInfo) ?? 1)"
            Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" AdornmentAriaLabel="Show/Hide Password"
            OnAdornmentClick="ToggleViewPassword" 
            MaxLength="@(MudModelFormTools.GetSize(PropertyInfo) ?? 524288)"
            For="@(MudModelFormTools.GetExpression<string>(Instance, PropertyInfo))"
            HelperText="@_fieldNotes" />
}
else
{
    <MudTextField @key="PropertyInfo.Name" 
        @bind-Value="PropertyValue" 
        InputType="@TextFieldType"
        ReadOnly=!PropertyInfo.IsEditable()
        Label="@GetLabel()" 
        Variant="Variant.Text"
        Placeholder="@localize(MudModelFormTools.GetPlaceHolder(PropertyInfo))" 
        Lines="@(MudModelFormTools.GetLineCount(PropertyInfo) ?? 1)"
        MaxLength="@(MudModelFormTools.GetSize(PropertyInfo) ?? 524288)"
        For="@(MudModelFormTools.GetExpression<string>(Instance, PropertyInfo))"
        HelperText="@_fieldNotes"
        />
}

@code {

    [Parameter]
    public System.Reflection.PropertyInfo PropertyInfo { get; set; }

    [Parameter, EditorRequired]
    public T? Instance { get; set; }

    [Parameter]
    public ModelFormStyle ModelFormStyle { get; set; }

    [Parameter]
    public bool Editable { get; set; } = true;

    [CascadingParameter(Name = "Notifier")]
    public Func<ModelFormArgsInternal, Task> Notifier { get; set; }

    [CascadingParameter(Name = "LocalizerFunction")]
    public Func<string, string?> LocalizerFunction { get; set; } = null;

    [CascadingParameter(Name = "ModelFormContext")]
    public ModelFormContext<T> ModelFormContext { get; set; } = null;

    private string? _fieldNotes;

    private bool showPassword = false;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ToggleViewPassword()
    {
        @if (showPassword)
        {
            showPassword = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            showPassword = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private string localize(string input)
    {
        return LocalizerFunction is null ? input : (LocalizerFunction(input) ?? input);
    }

    private InputType TextFieldType
    {
        get { return MudModelFormTools.IsPasswordField(PropertyInfo) ? InputType.Password : InputType.Text; }
    }

    protected override async Task OnInitializedAsync()
    {
        valueChangedCallback = EventCallback.Factory.Create<object>(this, s => OnValueChanged(s));
        _fieldNotes = MudModelFormTools.GetFieldNote(ModelFormContext, PropertyInfo);
    }

    private EventCallback<object> valueChangedCallback;

    private async Task OnValueChanged(object value)
    {
        var changeArgs = new ModelFormArgsInternal() { PropertyInfo = PropertyInfo, EditContext = new EditContext(PropertyInfo) };
        await Notifier(changeArgs);
    }

    public string PropertyValue
    {
        get => PropertyInfo.GetValue(Instance) as string;
        set
        {
            var prevValue = PropertyInfo.GetValue(Instance) as string;
            PropertyInfo.SetValue(Instance, value);
            if (value != prevValue)
                valueChangedCallback.InvokeAsync(value);
        }
    }

    public string GetFormattedValue()
    {
        var value = PropertyInfo.GetValue(Instance);

        if (value is null)
            return string.Empty;

        var format = PropertyInfo.GetStringFormat();
        if (format is null)
        {
            return value.ToString();
        }
        else
        {
            if (MudModelFormTools.IsNumericType(PropertyInfo.PropertyType))
            {
                var num = Convert.ToDouble(PropertyInfo.GetValue(Instance));
                return num.ToString(format);
            }
            else
            {
                return value.ToString();
            }
        }
    }

    /// <summary>
    /// Text that will be displayed for the Cancel button. Will be null and hidden by default.
    /// </summary>
    [CascadingParameter(Name = "LabelForPropertyFunc")]
    public Func<string, string> LabelForPropertyFunc { get; set; } = null;

    private string GetLabel()
    {
        return MudModelFormTools.GetLabel(PropertyInfo, LabelForPropertyFunc, false);
    }

    private string GetID() => PropertyInfo.Name;

    private int? HasLineCount()
    {
        var att = Attribute.GetCustomAttribute(PropertyInfo, typeof(MudFormAttribute)) as MudFormAttribute;
        return att?.LineCount; 
    }

    private int? HasStringLength()
    {
        var att = Attribute.GetCustomAttribute(PropertyInfo, typeof(StringLengthAttribute)) as StringLengthAttribute;
        return att?.MaximumLength;
    }
}