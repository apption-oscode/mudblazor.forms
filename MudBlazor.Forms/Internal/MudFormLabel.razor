@namespace MudBlazor.Forms
@typeparam T

@if (!string.IsNullOrWhiteSpace(@GetLabel()))
{
    <label class="ae ae-form-control-label @RequiredClass" for="@GetID()">
        <MudText>@GetLabel()</MudText>
    </label>

    @if (!string.IsNullOrEmpty(@GetFieldNotes()))
    {
        <label class="ae ae-form-control-label notes @RequiredClass">
            <MudText>@GetFieldNotes()</MudText>
        </label>        
    }
}
else
{
    <div></div>
}

@code {
    [Parameter, EditorRequired]
    public System.Reflection.PropertyInfo PropertyInfo { get; set; } = default!;

    [Parameter, EditorRequired]
    public T Instance { get; set; } = default!;

    /// <summary>
    /// There are two major layout options. Standard has line based with label / field and compact has a tabular layout with CSS flex.
    /// </summary>
    [Parameter] public ModelFormStyle ModelFormStyle { get; set; }

    [Parameter] public bool ShowOptional { get; set; } = true;

    private bool IsRequired => MudModelFormTools.IsRequired(PropertyInfo);

    private string RequiredClass => IsRequired? "ae-label-required": "ae-label-optional";

    private string GetID() => PropertyInfo.Name;

    private string GetLabel()
    {
        return MudModelFormTools.GetLabel(PropertyInfo, LabelForPropertyFunc, false);
    }

    private string GetFieldNotes()
    {
        if (ModelFormContext != null && LabelsOnTop && !string.IsNullOrEmpty(ModelFormContext.GetFieldNote(PropertyInfo)))
        {
            return ModelFormContext.GetFieldNote(PropertyInfo);
        }
        return string.Empty;

    }
    /// <summary>
    /// Text that will be displayed for the Cancel button. Will be null and hidden by default.
    /// </summary>
    [CascadingParameter(Name= "LabelForPropertyFunc")]
    public Func<string,string>? LabelForPropertyFunc { get; set; } = null;

    [CascadingParameter(Name = "ModelFormContext")]
    public ModelFormContext<T>? ModelFormContext { get; set; } = null;

    [CascadingParameter(Name = "LabelsOnTop")]
    public bool LabelsOnTop { get; set; } = false;
}
