@typeparam T
@namespace MudBlazor.Forms

@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@inject ILogger<MudFormsDropdownPropertyInput<T>> logger
<MudFormLabel PropertyInfo="@PropertyInfo" ShowOptional="false" Instance="@Instance" />

@if (ValidDisplayValues != null)
{
    <MudSelect T="int" Label="Coffee" AnchorOrigin="Origin.BottomCenter" @bind-Value="InputSelectIndex">
        @if (!MudModelFormTools.IsRequired(PropertyInfo))
            {
                <MudSelectItem Value="@NO_VALUE">@localize(GetPlaceholder())</MudSelectItem>
            }
        @for (int il = 0; il < ValidDisplayValues.Count; il++)
            {
            <MudSelectItem Value="@il">@(localize(ValidDisplayValues[il]))</MudSelectItem>
            }        
    </MudSelect>
}
else
{
    <select class="ae input"><option value="">-</option></select>
    <MudSelect T="int" Label="Coffee" AnchorOrigin="Origin.BottomCenter" @bind-Value="InputSelectIndex">
        @if (!MudModelFormTools.IsRequired(PropertyInfo))
        {
            <MudSelectItem Value="@NO_VALUE" Disabled=true>-</MudSelectItem>
        }
        @for (int il = 0; il < ValidDisplayValues.Count; il++)
        {
            <MudSelectItem Value="@il">@(localize(ValidDisplayValues[il]))</MudSelectItem>
        }
    </MudSelect>
}

<div class="errortext">
    <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(MudModelFormTools.GetExpression<object>(Instance,PropertyInfo))" />
</div>

@code {
    [Parameter]
    public System.Reflection.PropertyInfo PropertyInfo { get; set; }

    [Parameter]
    public T Instance { get; set; }

    [Parameter] public ModelFormStyle ModelFormStyle { get; set; }

    [CascadingParameter(Name = "AreFieldsNullable")]
    public bool AreFieldsNullable { get; set; } = false;

    public const int NO_VALUE = -1;

    private List<string> ValidDisplayValues { get; set; }

    private List<object> ActualValues { get; set; }

    private string GetPlaceholder()
    {
        var label = MudModelFormTools.GetPlaceHolder(PropertyInfo);
        if (string.IsNullOrWhiteSpace(label))
            return "-";
        return label;
    }    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //var firstValue = (ModelFormContext.GetDisplayValue(PropertyInfo,PropertyValue) is null) ? getValidValues()?.FirstOrDefault() : PropertyValue;
        if (firstRender && MudModelFormTools.IsRequired(PropertyInfo))
        {
            var currentValue = PropertyInfo.GetValue(Instance);
            InputSelectIndex = ActualValues.IndexOf(currentValue);
            if (InputSelectIndex == -1)
            {
                logger.LogWarning($"MudModelForm - Property:{PropertyInfo.Name} - cannot locate value '{currentValue}' in dropdown values provided (list size={ActualValues.Count}) - selecting default");
                InputSelectIndex = MudModelFormTools.IsRequired(PropertyInfo) ? 0 : NO_VALUE;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        valueChangedCallback = EventCallback.Factory.Create<object>(this, s => OnValueChanged(s));
        UpdateOptions();
        ModelFormContext.RegisterOptionComponent(PropertyInfo, this, () => UpdateOptions());
    }

    private void UpdateOptions()
    {
        var optValues = ModelFormContext.GetOptionValuesForProperty(PropertyInfo);
        ValidDisplayValues = optValues.labels;
        ActualValues = optValues.values;
        var idx = ActualValues.IndexOf(PropertyInfo.GetValue(Instance));
        if (idx == -1)
            idx = MudModelFormTools.IsRequired(PropertyInfo)?0:NO_VALUE;
        // make sure idx is in bounds
        if ((idx == -1 && MudModelFormTools.IsRequired(PropertyInfo)) || idx > (ActualValues.Count - 1))
            throw new InvalidOperationException($"Request index for {PropertyInfo.Name} is {idx} but list has {ActualValues.Count} values");
        InputSelectIndex = idx;
    }

    /// <summary>
    /// Text that will be displayed for the Cancel button. Will be null and hidden by default.
    /// </summary>
    [CascadingParameter(Name = "LabelForPropertyFunc")]
    public Func<string, string> LabelForPropertyFunc { get; set; } = null;

    [CascadingParameter(Name = "ModelFormContext")]
    public ModelFormContext<T> ModelFormContext { get; set; } = null;

    [CascadingParameter(Name = "Notifier")]
    public Func<ModelFormArgsInternal, Task> Notifier { get; set; }

    [CascadingParameter(Name = "LocalizerFunction")]
    public Func<string, string?> LocalizerFunction { get; set; } = null;

    private string localize(string input)
    {
        return LocalizerFunction is null ? input : (LocalizerFunction(input)?? input);
    }

    private EventCallback<object> valueChangedCallback;

    private async Task OnValueChanged(object value)
    {
        ModelFormContext.OnOptionPropertyChange(PropertyInfo, value);
        var changeArgs = new ModelFormArgsInternal() { PropertyInfo = PropertyInfo, EditContext = new EditContext(PropertyInfo) };
        await Notifier(changeArgs);
    }

    private int currentIndex = 0;

    public int InputSelectIndex
    {
        get => currentIndex; 
        set
        {
            if (currentIndex != value)
            {
                currentIndex = value;
                if (currentIndex >= 0)
                {
                    PropertyInfo.SetValue(Instance, ActualValues[currentIndex]);
                    valueChangedCallback.InvokeAsync(ActualValues[currentIndex]);
                }
                else if (currentIndex == NO_VALUE)
                {
                    var instanceValue = AreFieldsNullable ? null : string.Empty;
                    PropertyInfo.SetValue(Instance, instanceValue);
                    valueChangedCallback.InvokeAsync(instanceValue);
                }
            }
        }
    }

    private string GetID() => PropertyInfo.Name;



    private int? HasStringLength()
    {
        var att = StringLengthAttribute.GetCustomAttribute(PropertyInfo, typeof(StringLengthAttribute)) as StringLengthAttribute;
        return att?.MaximumLength;
    }

}