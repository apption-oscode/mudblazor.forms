@*
    Copyright 2020 Apption Corporation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*@

@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Forms
@using System.Reflection
@typeparam T
@namespace MudBlazor.Forms

@inject ILogger<MudModelForm<T>> Logger

@if (Model != null)
{
    @if (EnableOutline)
    {
        <MudDrawer Breakpoint="Breakpoint.Lg" Anchor="Anchor.End" ClipMode="DrawerClipMode.Always" Elevation="0" Color="Color.Transparent">
            <MudPageContentNavigation @ref="_contentNavigation" ActivateFirstSectionAsDefault="true"/>
        </MudDrawer>
    }
    <div id=@(EnableOutline ? "Uncategorized" : "")>
        <EditForm Model="Model" OnSubmit="@OnSubmit">
            @if (ModelFormContext.CustomValidation)
            {
                <MudFormsCustomValidationValidator
                    @ref="_customValidationValidator"
                    Model="Model"
                    ModelFormContext="ModelFormContext"/>
            }
            else
            {
                <DataAnnotationsValidator/>
            }

            @* container categories *@
            @foreach (var category in ModelFormContext.GetCategories())
            {
                var isCategoryLocked = ModelFormContext.IsCategoryLocked(category.category);

                // doing anchor stuff
                <div style="display: flex; flex-direction: row">
                    @if (!string.IsNullOrWhiteSpace(category.category))
                    {
                        string id = "";
                        @if (EnableOutline)
                        {
                            id = category.category;
                            if (_anchors != null && !_anchors.Any(a => a.Id == id))
                            {
                                _anchors.Add((id,
                                    @<MudText Typo="Typo.button">@id</MudText>
                                    ));
                            }
                        }

                        <MudPaper Class="d-flex flex-row flex-grow-1 gap-4" Elevation="0">
                            <MudDivider DividerType="DividerType.Inset" />
                            <MudText Typo="Typo.h4">@Localize(category.category)</MudText>
                                <MudText Typo="Typo.subtitle2">@ModelFormContext.GetCategoryNote(category.category)</MudText>
                                @if (IsSectionLocksVisible)
                                {
                                        <MudCheckBox T=bool Checked="isCategoryLocked" CheckedChanged="(async isCheck => await HandleCategoryLock(isCheck, category.category))" CheckedIcon="@CheckedIcon" UncheckedIcon="@UncheckedIcon">@Localize("Lock Section") </MudCheckBox>
                                }
                        </MudPaper>
                    }
                </div>

                // loop properties
                @foreach (var props in category.properties)
                {
                    <MudStack Spacing="Spacing">
                        @foreach (var prop in props)
                        {
                            @* TODO: explore single cascading property *@
                            <CascadingValue Value="@OnChange" Name="OnChangeCallback">
                                <CascadingValue Value="@LocalizerFunction" Name="LocalizerFunction">
                                    <CascadingValue Value="@ModelFormContext" Name="ModelFormContext">
                                        <CascadingValue Value="@LabelForPropertyFunc" Name="LabelForPropertyFunc">
                                            <CascadingValue Value="@_notifyArg" Name="Notifier">
                                                <CascadingValue Value="@LabelsOnTop" Name="LabelsOnTop">
                                                    <CascadingValue Value="@AreFieldsNullable" Name="AreFieldsNullable">
                                                        @if (IsReadOnly || isCategoryLocked)
                                                        {
                                                            <MudFormsPropertyValueDisplay PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                        }
                                                        else
                                                        {
                                                            if (ModelFormContext.IsDropDown(prop))
                                                            {
                                                                <MudFormsDropdownPropertyInput PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                            }
                                                            else
                                                            {
                                                                if (GetNonNullableType(prop) == typeof(string))
                                                                {
                                                                    <MudFormsStringPropertyInput PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle" Editable="prop.IsEditable()"/>
                                                                }
                                                                if (prop.PropertyType == typeof(int))
                                                                {
                                                                    <MudFormsNumberPropertyInput T=int PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                }
                                                                if (prop.PropertyType == typeof(long))
                                                                {
                                                                    <MudFormsNumberPropertyInput T=long PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                }
                                                                if (prop.PropertyType == typeof(float))
                                                                {
                                                                    <MudFormsNumberPropertyInput T=float PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                }
                                                                if (prop.PropertyType == typeof(double))
                                                                {
                                                                    <MudFormsNumberPropertyInput T=double PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                }
                                                                @if (prop.PropertyType == typeof(Decimal))
                                                                {
                                                                    <MudFormsNumberPropertyInput T=Decimal PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                }
                                                                @if (prop.PropertyType == typeof(int?))
                                                                {
                                                                    <MudFormsNumberPropertyInput T=int? PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                }
                                                                @if (prop.PropertyType == typeof(long?))
                                                                {
                                                                    <MudFormsNumberPropertyInput T=long? PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                }
                                                                @if (prop.PropertyType == typeof(float?))
                                                                {
                                                                    <MudFormsNumberPropertyInput T=float? PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                }
                                                                @if (prop.PropertyType == typeof(double?))
                                                                {
                                                                    <MudFormsNumberPropertyInput T=double? PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                }
                                                                @if (prop.PropertyType == typeof(Decimal?))
                                                                {
                                                                    <MudFormsNumberPropertyInput T=Decimal? PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                }
                                                                @if (GetNonNullableType(prop) == typeof(bool))
                                                                {
                                                                    <MudFormsBoolPropertyInput PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                }
                                                                @if (GetNonNullableType(prop) == typeof(DateTime))
                                                                {
                                                                    <MudFormsDateTimePropertyInput PropertyInfo="prop" Instance="Model" ModelFormStyle="ModelFormStyle"/>
                                                                }
                                                            }
                                                        }
                                                    </CascadingValue>
                                                </CascadingValue>
                                            </CascadingValue>
                                        </CascadingValue>
                                    </CascadingValue>
                                </CascadingValue>
                            </CascadingValue>
                        }
                    </MudStack>
                }
            }
            <MudText Color="@Color.Error">
                <ValidationSummary/>
            </MudText>
            <MudStack Row Class="mt-8">
                <MudButton Disabled="@(!IsSubmitEnabled)" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@Localize(SubmitLabel)</MudButton>
                @if (!string.IsNullOrWhiteSpace(CancelLabel) && OnCancel != null)
                {
                    <MudButton OnClick="ReloadForm">@Localize(CancelLabel)</MudButton>
                }
            </MudStack>

        </EditForm>
    </div>
}


@code {
    private bool _isConfigured = false;
    private EditContext? _editContext;

    [Parameter]
    public bool IsSubmitEnabled { get; set; } = true;

    [Parameter]
    public bool IsSectionLocksVisible { get; set; }

    [Parameter]
    public int Spacing { get; set; } = 3;

    private MudPageContentNavigation _contentNavigation;

    protected override async Task OnInitializedAsync()
    {
        if (EnableOutline)
        {
            _anchors = new List<(string Id, RenderFragment ChildContent)>
            {
                (Localize("Uncategorized"),
                    @<MudText Typo="Typo.caption">@Localize("Uncategorized Fields")</MudText>
                    )
            };
        }

        ModelFormContext.Logger = Logger;
        ModelFormContext.RefreshModel = async () => await InvokeAsync(StateHasChanged);
        ModelFormContext.SetProperties(GetProperties());
        if (!_isConfigured)
        {
            await OnConfigure.InvokeAsync(ModelFormContext);
            _isConfigured = true;
        }
        _notifyArg = OnNotify;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) StateHasChanged();
        if (EnableOutline && _contentNavigation != null)
        {
            foreach (var category in ModelFormContext.GetCategories())
            {
                _contentNavigation.AddSection(new MudPageContentSection(Localize(category.category), category.category), false);
            }
            StateHasChanged();
        }
    }

    [Parameter]
    public Func<string, string?>? LocalizerFunction { get; set; }

    private string Localize(string input)
    {
        return (LocalizerFunction?.Invoke(input) ?? input);
    }

    [Parameter, EditorRequired]
    public T? Model { get; set; }

    [Parameter]
    public string RowColor { get; set; } = "blue";

    /// <summary>
    /// Text that will be displayed for the Submit button. Will be "Submit" by default
    /// </summary>
    [Parameter]
    public string SubmitLabel { get; set; } = "Submit";

    /// <summary>
    /// Text that will be displayed for the Cancel button. Will be null and hidden by default.
    /// </summary>
    [Parameter]
    public string? CancelLabel { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; }

    /// <summary>
    /// Text that will be displayed for the Cancel button. Will be null and hidden by default.
    /// </summary>
    [Parameter]
    public Func<string, string>? LabelForPropertyFunc { get; set; }

    private Func<ModelFormArgsInternal, Task>? _notifyArg;

    private async Task ReloadForm()
    {
        _isCancelled = true;
        Model = await OnCancel?.Invoke()!;
        StateHasChanged();
    }

    /// <summary>
    /// A callback that will be invoked when the form is cancelled
    ///
    /// This call is expected to revert all the changes to the Model instance and return a model before modifications
    /// </summary>
    [Parameter]
    public Func<Task<T>>? OnCancel { get; set; }

    /// <summary>
    /// A callback that will be invoked when the form is created
    ///
    /// This call is designed to let the user access the context and configure drop downs and other dynamic items
    /// </summary>
    [Parameter]
    public EventCallback<IModelFormContext> OnConfigure { get; set; }

    /// <summary>
    /// A callback that will be invoked when the form is submitted and the
    /// <see cref="EditContext"/> is determined to be valid.
    /// </summary>
    [Parameter]
    public EventCallback<EditContext> OnValidSubmit { get; set; }

    /// <summary>
    /// A callback that will be invoked when the form is submitted and the
    /// <see cref="EditContext"/> is determined to be invalid.
    /// </summary>
    [Parameter]
    public EventCallback<EditContext> OnInvalidSubmit { get; set; }

    /// <summary>
    /// There are two major layout options. Standard has line based with label / field and compact has a tabular layout with CSS flex.
    /// </summary>
    [Parameter]
    public ModelFormStyle ModelFormStyle { get; set; } = ModelFormStyle.Normal;

    [Parameter]
    public EventCallback<string> OnCategoryLock { get; set; }

    private ModelFormContext<T> ModelFormContext { get; } = new();

    /// <summary>
    /// This method will be called when a property is changed.
    /// </summary>
    [Parameter]
    public EventCallback<ModelFormChangeArgs> OnChange { get; set; }

    [Parameter]
    public bool LabelsOnTop { get; set; }

    [Parameter]
    public bool AreFieldsNullable { get; set; }

    [Parameter]
    public bool Flexbox { get; set; }

    [Parameter]
    public bool EnableOutline { get; set; }

    [Parameter]
    public string? OutlineStyle { get; set; }

    [Parameter]
    public string? CheckedIcon { get; set; }

    [Parameter]
    public string? UncheckedIcon { get; set; }

    private bool _isCancelled = false;

    private List<(string Id, RenderFragment ChildContent)>? _anchors;

    private List<PropertyInfo> GetProperties() => typeof(T).GetAeModelProperties();

    private Type? GetNonNullableType(PropertyInfo prop) => MudModelFormTools.GetNonNullableType(prop);

    private MudFormsCustomValidationValidator<T>? _customValidationValidator;

    private async Task HandleCategoryLock(bool isLocked, string category)
    {
        if (!string.IsNullOrEmpty(category))
        {
            ModelFormContext.RegisterCategoryLock(category, isLocked);
            await OnConfigure.InvokeAsync(ModelFormContext);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnSubmit(EditContext editContext)
    {
        if (_isCancelled)
        {
            _isConfigured = false;
            return;
        }

        var isValid = ModelFormContext.CustomValidation
            ? _customValidationValidator!.Validate() : editContext.Validate();

        if (isValid)
        {
            await OnValidSubmit.InvokeAsync(editContext);
        }
        else
        {
            await OnInvalidSubmit.InvokeAsync(editContext);
        }
    }

    private async Task OnNotify(ModelFormArgsInternal internalArgs)
    {
        var args = new ModelFormChangeArgs { Context = ModelFormContext, PropertyInfo = internalArgs.PropertyInfo, EditContext = internalArgs.EditContext };
        await OnChange.InvokeAsync(args);
        await InvokeAsync(StateHasChanged);
    }

}