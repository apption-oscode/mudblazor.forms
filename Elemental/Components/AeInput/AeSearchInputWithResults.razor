@*
 Copyright 2020 Apption Corporation
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
     http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*@
@inherits HtmlInputElement
@namespace Elemental.Components
@using System.Threading
@typeparam T 


<div class="@_classname" @attributes="InputAttributesWithoutClass">
    <div class="ae search-bar">
        <i class="@_searchIconClassname"></i>
        <input class="ae input search" type="text" @bind-value="_inputValue" @bind-value:event="oninput" @onkeyup="HandleKeyUp" 
        placeholder="@Placeholder" @onfocusin="@(() => _searchIsActive = true)" @onfocusout="OnFocusOut"/>
        <i class="@_clearIconClassname" @onclick="ClearSearch"></i>
    </div>
    <div class="@_searchResultsClassname">
        <div class="ae search-border"></div>
        @foreach(var result in SearchResults.Take(MaxResultsToDisplay))
        {
            <div class="ae search-result" @onclick="async () => await OnResultSelected.InvokeAsync(result)">
                @if (GetRenderFragment == null)
                {
                    <i class="@_searchResultIcon"></i>
                    @result
                }
                else
                {
                    @GetRenderFragment(result)
                }
            </div>         
        }
    </div>
</div>

@code {

    [Parameter]
    public string SearchIconFAClass { get; set; } = "fas fa-search";
    [Parameter]
    public string ClearIconFAClass { get; set; } = "fas fa-times";
    [Parameter]
    public string SearchResultIconFAClass { get; set; } = "fas fa-search";
    [Parameter]
    public EventCallback<T> OnResultSelected { get; set; }
    [Parameter]
    public int MaxResultsToDisplay { get; set; } = 10;
    [Parameter]
    public List<T> SearchResults { get; set; } = new();
    [Parameter]
    public Func<T, RenderFragment> GetRenderFragment { get; set; }


    private string _classname => $"ae search-wrapper {_inputClass}";
    private string _searchResultsClassname => $"ae search-results {(SearchResults.Count > 0 && _searchIsActive ? "visible": "")}";
    private string _searchIconClassname => $"{SearchIconFAClass} ae search-icon";
    private string _clearIconClassname => $"{ClearIconFAClass} ae clear-icon {(_inputValue?.Length > 0 ? "visible" : "")}";
    private string _searchResultIcon => $"{SearchResultIconFAClass} ae search-result-icon";
    private bool _searchIsActive;

    private void ClearSearch()
    {
        _inputValue = "";
        OnTimerFire(null, null);
    }

    private void OnFocusOut(FocusEventArgs e)
    {
        //TODO: find a better solution for hanling results click - probably JS
        new Thread(() =>
        {
            Thread.Sleep(250);
            _searchIsActive = false;
            InvokeAsync(() => StateHasChanged());
        }).Start();
    }


}
