@*
 Copyright 2020 Apption Corporation
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
     http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*@

@namespace Elemental.Components
@inherits HtmlElement
@inject IJSRuntime JSRuntime
@inject ILogger<AeLayoutV2> logger
@using Elemental.Components
@using Elemental.Code
@using Microsoft.Extensions.Logging

<style>

    .ae.side-nav {
        width: @(_width)px;
    }

    .ae.body-wrapper.has-side-nav {
        margin-left: @(_marginWidth)px;
    }
</style>

<div class="@_layoutClassname" @attributes="InputAttributesWithoutClass">
    @*@if (TopNavigation != null)
    {
        <div class="@_topNavClassname">
            @if (_browserSize == BrowserSize.Small)
            {
                <div class="nav-expand" @onclick="@(() => ToggleExpansion())">
                    <AeIcon Icon="menu"></AeIcon>
                </div>
            }
            @TopNavigation
        </div>
    }*@
    <div class="@_sideNavOverlayClassName" @onclick="@(() => ToggleExpansion())"></div>
    <div class="ae side-nav @_className">
        <div class="header">
            @if (Brand != null && (!_isCollapsed || BrandSmall is null))
            {
                @Brand                
            }
            else if (BrandSmall != null && _isCollapsed)
            {
                @BrandSmall
            }
        </div>
        <div class="menu">
            @foreach (var nav in Links)
            {
                <AeSideNavItem2 Link="nav" ToggleSublink="ToggleSublink" IsCollapsed="_isCollapsed" />
                @if (nav.ChildLinks != null)
                {
                    <div class="subnav-wrapper @(_toggleSublink[nav.Label] ? "expanded":"")">
                        @foreach (var item in nav.ChildLinks)
                        {
                            <AeSideNavItem2 Link="item" ToggleSublink="ToggleSublink" IsCollapsed="_isCollapsed" />

                        }
                    </div>
                }
            }
        </div>
        <div class="bottom @_sideNavBottomClass">
            <div class="toggle-expand" @onclick="(()=>ToggleExpansion())">
                <AeIcon Icon="@_iconName" />
            </div>
        </div>
    </div>

    <div class="@_wrapperClassname">
        <div class="@_contentClassname">
            @ChildContent
        </div>
    </div>
</div>

@code {
    [Parameter]
    public RenderFragment Brand { get; set; }
    [Parameter]
    public RenderFragment BrandSmall { get; set; }
    //[Parameter]
    //public RenderFragment TopNavigation { get; set; }
    [Parameter]
    public List<AeNavLink> Links { get; set; }

    private string _layoutClassname => $"ae layout-v2 {_inputClass}";
    private string _sideNavClassname => $"ae side-nav";
    private string _topNavClassname => $"ae top-nav";
    private string _wrapperClassname => $"ae body-wrapper has-side-nav";
    private string _contentClassname => $"ae content-body";
    private string _sideNavOverlayClassName => $"ae side-nav-overlay {(_isMediumOrSmallCollapsed ? "" : "hide")}";

    private string _iconName => _isCollapsed ? "arrow-right-s" : "arrow-left-s";
    private string _sideNavBottomClass => _browserSize == BrowserSize.Small ? "hide" : string.Empty;
    private string _className => _browserSize == BrowserSize.Small ? _showSideNav ? "slide-in" : "slide-out" : string.Empty;

    private int _browserWidth = 0;
    private int _width;
    private int _marginWidth;
    private bool _isCollapsed;
    private bool _isMediumOrSmallCollapsed;
    private bool _showSideNav;
    private BrowserSize _browserSize;
    private Dictionary<string, bool> _toggleSublink = new Dictionary<string, bool>();



    protected override void OnInitialized()
    {
        _width = SidebarService.SIDEBAR_WIDTH;
        _marginWidth = SidebarService.SIDEBAR_WIDTH;
        _isCollapsed = false;
        _isMediumOrSmallCollapsed = false;
        _showSideNav = true;
        //SetBrowserSize();
        _browserSize = BrowserSize.Medium;
        SidebarService.Logger = logger;
        SidebarService.OnResize += BrowserHasResized;

        foreach (var link in Links)
        {
            if (link.ChildLinks != null)
                _toggleSublink.Add(link.Label, false);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try {
                await JSRuntime.InvokeVoidAsync("initializeSidebar.registerResizeCallback");

                _browserWidth = await SidebarService.GetInnerWidth(JSRuntime);
                SetBrowserSize();
                switch (_browserSize)
                {
                    case BrowserSize.Large:
                        _width = SidebarService.SIDEBAR_WIDTH;
                        _marginWidth = SidebarService.SIDEBAR_WIDTH;
                        _isCollapsed = false;
                        break;
                    case BrowserSize.Medium:
                        _width = SidebarService.SIDEBAR_COLLAPSE_WIDTH;
                        _marginWidth = SidebarService.SIDEBAR_COLLAPSE_WIDTH;
                        _isCollapsed = true;
                        break;
                    case BrowserSize.Small:
                        _isCollapsed = true;
                        _width = 0;
                        _marginWidth = 0;
                        _showSideNav = false;
                        break;
                    default:
                        //invalid BrowserSize
                        break;
                }
                StateHasChanged();
            } catch (Exception ex)
            {
                throw new AEException($"sidebar.js is likely missing",ex);
            }
        }
    }

    private void ToggleExpansion(bool sizeChanged = false)
    {
        _isCollapsed = !_isCollapsed;

        if (_isCollapsed)
        {
            _width = SidebarService.SIDEBAR_COLLAPSE_WIDTH;
            if (sizeChanged || _browserSize == BrowserSize.Large)
                _marginWidth = SidebarService.SIDEBAR_COLLAPSE_WIDTH;
            else if (_browserSize == BrowserSize.Medium || _browserSize == BrowserSize.Small)
                _isMediumOrSmallCollapsed = false;

            if (_browserSize == BrowserSize.Small)
                _showSideNav = false;
        }
        else
        {
            _width = SidebarService.SIDEBAR_WIDTH;
            if (sizeChanged || _browserSize == BrowserSize.Large)
                _marginWidth = SidebarService.SIDEBAR_WIDTH;
            else if (_browserSize == BrowserSize.Medium || _browserSize == BrowserSize.Small)
                _isMediumOrSmallCollapsed = true;

            if (_browserSize == BrowserSize.Small)
                _showSideNav = true;
        }
        StateHasChanged();
    }

    private async Task BrowserHasResized()
    {
        _browserWidth = await SidebarService.GetInnerWidth(JSRuntime);

        var oldBrowserSize = _browserSize;
        SetBrowserSize();

        //Change from big screen to small screen
        if (oldBrowserSize > _browserSize)
        {
            if (!_isCollapsed)
                ToggleExpansion(true);

            //Set the content margin to 0 when changing from medium to small
            if (_browserSize == BrowserSize.Small)
            {
                _marginWidth = 0;
                _showSideNav = false;
            }
        }
        //change from small screen to big screen
        else if (oldBrowserSize < _browserSize)
        {
            if (_isCollapsed)
                ToggleExpansion(true);

            //Set the content margin to the collapsed _width when changing from small to medium
            if (_browserSize == BrowserSize.Medium)
            {
                _marginWidth = SidebarService.SIDEBAR_COLLAPSE_WIDTH;
                _showSideNav = true;
            }
        }
        //resize within the same scope
        else
        {
            //collapsed when small or medium screen
            if (_browserSize != BrowserSize.Large && !_isCollapsed)
                ToggleExpansion();
        }
        StateHasChanged();
    }

    private void SetBrowserSize()
    {
        if (_browserWidth > SidebarService.LARGE_SCREEN_SIZE)
            _browserSize = BrowserSize.Large;
        else if (_browserWidth < SidebarService.MEDIUM_SCREEN_SIZE)
            _browserSize = BrowserSize.Small;
        else
            _browserSize = BrowserSize.Medium;
    }

    private void ToggleSublink(AeNavLink nav)
    {
        if (nav.ChildLinks != null)
        {
            if (!_toggleSublink[nav.Label])
                _toggleSublink[nav.Label] = !_toggleSublink[nav.Label];
        }
        else
        {
            foreach (var key in _toggleSublink.Keys.ToList())
            {
                if (!Links.First(i => i.Label == key).ChildLinks.Any(i => i.Label == nav.Label))
                    _toggleSublink[key] = false;

            }
        }
        StateHasChanged();
    }
}
