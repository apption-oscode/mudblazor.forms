@namespace Elemental.Components
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Routing
@inject IJSRuntime JSRuntime
@inject GetDimensionsService DimensionService
@implements IDisposable


<a class="item @(_active? "active" : "") @(IsCollapsed ? "" : "indent")" @onclick="HandleLinkClick"  @ref="_tooltipWrapperRef">
    @if (!string.IsNullOrEmpty(Link.IconName))
    {
        <AeIcon Icon="@Link.IconName" IconStyle="Link.IconStyle" class="@Link.IconClassName"/>
    }
    <div class="label">@Link.Label</div>
    <span class="tooltip-text">@Link.Label</span>
</a>


@code {
    [Parameter]
    public AeNavLink Link { get; set; }
    [Parameter]
    public Action<AeNavLink> ToggleSublink { get; set; }
    [Parameter]
    public bool IsCollapsed { get; set; }
    private bool _active = false;
    private ElementReference _tooltipWrapperRef;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            InitializedNavItem();
            await InitializedToolTips();

        }
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        base.InvokeAsync(() =>
        {
            InitializedNavItem();
        });
    }

    private void HandleLinkClick()
    {
        if (Link.ChildLinks != null)
            NavigationManager.NavigateTo(Link.ChildLinks.First().To, false);
        else
            NavigationManager.NavigateTo(Link.To, false);
        ToggleSublink.Invoke(Link);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private void InitializedNavItem()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var path = uri.LocalPath;

        if (path == Link?.To || (Link.ChildLinks != null && Link.ChildLinks.Any(l => l.To == path)))
        {
            _active = true;
            ToggleSublink.Invoke(Link);
        }
        else
            _active = false;
        StateHasChanged();
    }

    private async Task InitializedToolTips()
    {
        await JSRuntime.InvokeVoidAsync("initializeSidebar.initialize", _tooltipWrapperRef);
    }
}
