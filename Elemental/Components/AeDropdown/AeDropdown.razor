@*
 Copyright 2020 Apption Corporation
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
     http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*@

@namespace Elemental.Components
@inherits HtmlElement
@inject IJSRuntime JSRuntime
@implements IDisposable
@typeparam T

<div class="@_wrapperClassname" @attributes="InputAttributesWithoutClass" ae-id="@_id">
    <span @onclick="ToggleVisiblity">
        @_labelFragment
    </span>
    
    <div class="ae content-wrapper">
        @foreach(var item in Items)
        {
            <div class="ae dropdown-item" @onclick="() => HandleItemClick(item)">
                @Renderer(item)
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public Func<Task<RenderFragment>> LabelRenderFragment { get; set; }
    [Parameter]
    public Action<T> OnChange { get; set; }
    [Parameter]
    public IEnumerable<T> Items { get; set; }
    [Parameter]
    public Func<T, RenderFragment> Renderer { get; set; }

    private string _wrapperClassname => $"ae dropdown-wrapper {_inputClass}";
    private string _id = $"ae-{Guid.NewGuid().ToString()}";

    private RenderFragment _labelFragment;

    protected override async Task OnParametersSetAsync()
    {
        if(Renderer is null)
        {
            Renderer = new Func<T, RenderFragment>(item =>
            {
                return @<AeTypography>@item</AeTypography>;
            });
        }

        if(Label != null || LabelRenderFragment is null)
        {
            _labelFragment = @<AeButton>
                                @Label
                                <AeIcon Icon="fas fa-caret-down" />
                            </AeButton>;
        }
        else
        {
            _labelFragment = await LabelRenderFragment();
        }
    }

    private void HandleItemClick(T item)
    {
        ToggleVisiblity();
        OnChange?.Invoke(item);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("aedropdown.initialize", _id);
        }
    }

    private void ToggleVisiblity()
    {
        InvokeAsync(async () =>
        {
            await JSRuntime.InvokeVoidAsync("aedropdown.toggleVisibility", _id);
        });
    }


    public void Dispose()
    {
        InvokeAsync(async () =>
        {
            await JSRuntime.InvokeVoidAsync("aedropdown.dispose", _id);
        });
    }
}